    output "bin/badapple.bin"
    org 0x0205
    jp start

    include "debug.z80"

chardefs = 0xF000
screen = 0xF800
outboxFlag = 0x0200
outboxData = 0x0201
inboxFlag = 0x0202
inboxData = 0x0203

cmdFileOpen = 0x40
cmdFileClose = 0x41
cmdFileRead = 0x42
cmdFileSeek = 0x43
cmdFileSeek = 0x43
cmdSetTimerFrequency = 0x50
cmdReset = 0x7F

frequency: dd 1000000/30

frameTime: dw 0
time: dw 0

loadAddress: dw 0
loadByteCount: dw 0

dataFileName: db "badapple.dat", 0

; -------------------------------------------------------------------------

 macro ExecuteCommand command
    ld a, command
    ld (inboxFlag), a
.commandwaitloop
    ld a, (inboxFlag)
    or a, a
    jr nz, .commandwaitloop
 endm

 macro add_hl_a
    add a, l
    ld l, a
    adc a, h
    sub a, l
    ld h, a
 endm

; -------------------------------------------------------------------------

start:
    call init

    ; Get the first frame size
    ld hl, 2
    ld (loadByteCount), hl
    ExecuteCommand cmdFileRead

    ; Store it in the byte count for the next load and take a copy in a 2nd alt-register
    exx
    ld hl, (dataBuffer)
    ld (loadByteCount), hl
    ld b,h
    ld c,l

    ; Init the big frames pointer
    ld de, bigFrames
    exx

frameLoop:
    ExecuteCommand cmdFileRead

    ld bc, (frameTime)
    inc bc
    ld (frameTime), bc

timeLoop:
    ld hl, (time)
    or a, a
    sbc hl, bc
    jr c, timeLoop

    ld de, dataBuffer
    ld hl, screen
    ld b, 0
decompressLoop:
    ld a, (de)
    ld b, a
    or a, a
    jp m, runOfChars
runOfSkips:
    add_hl_a
    inc hl
    jp runEnd
runOfChars:
    and a, 7
    inc a
runOfCharsLoop:
    ld (hl), b
    inc hl
    dec a
    jr nz, runOfCharsLoop
runEnd:
    inc de
    exx
    dec bc
    ld a, b
    or a, c
    exx

    jp nz, decompressLoop

    exx
    ld bc, dataBuffer
    add hl, bc
    dec hl
    ld b, (hl)
    dec hl
    ld c, (hl)
    bit 7, b
    jr nz, copyBigFrame
    ld h, b
    ld l, c
    ld (loadByteCount), hl
    ld a, b
    or a, c
    exx

    jp nz, frameLoop

    call prepareVideoRamForExit
    ExecuteCommand cmdReset

; -------------------------------------------------------------------------

copyBigFrame:
    res 7, b ; Remove the big frame flag to get the length
    push bc ; Preserve the frame length
    ld h, d ; Set up the source for the ldir...
    ld l, e ; ...to copy from the current big frame address
    ld de, dataBuffer ; Set up the destination for the ldir copy
    ldir ; Do the copy
    ld (loadByteCount), bc ; Store 0 into the load count to suppress loading when we start the frame
    ld d, h ; Copy the new big frame address...
    ld e, l ; ...back into its register
    pop bc ; Restore the frame length
    ld h, b ; And take a...
    ld l, c ; ...second copy
    exx
    jp frameLoop

; -------------------------------------------------------------------------

init:
    call initInterrupt
    call initTimers
    call initVideoRam
    call initCharDefs
    call openDataFile
    call initInboxData
    call loadBigFrames
    call initVariables
    ret

; -------------------------------------------------------------------------

initInterrupt:
	ld a, 0xC3          ; Opcode for jp
    ld hl, interrupt	; Interrupt handler
    ; Store at NMI vector address
	ld (0x0066), a
	ld (0x0067), hl
    ret

; -------------------------------------------------------------------------

initTimers:
    ld hl, frequency
    ld (inboxData), hl
    ExecuteCommand cmdSetTimerFrequency

    ld hl, 0
    ld (frameTime), hl
    ld (time), hl
    ret

; -------------------------------------------------------------------------

initVideoRam:
    ld bc, 256*8 + 40*30
    ld hl, chardefs
.charloop
    ld (hl), 0
    inc hl
    dec bc
    ld a, b
    or a, c
    jp nz, .charloop
    ret

; -------------------------------------------------------------------------

prepareVideoRamForExit:
    ld hl, chardefs + 32 * 8
    ld b, 8
.charDefLoop
    ld (hl), 0
    inc hl
    djnz .charDefLoop

    ld bc, 40*30
    ld hl, screen
.charloop
    ld (hl), 32
    inc hl
    dec bc
    ld a, b
    or a, c
    jp nz, .charloop
    ret

; -------------------------------------------------------------------------

initCharDefs:
    ld b, 0
    ld hl, chardefs
.charloop
    ld a, 0
    bit 3, b
    jr z, .segmentA
    or a, 15<<4
.segmentA
    bit 4, b
    jr z, .segmentB
    or a, 15
.segmentB
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl

    ld a, 0
    bit 5, b
    jr z, .segmentC
    or a, 15<<4
.segmentC
    bit 6, b
    jr z, .segmentD
    or a, 15
.segmentD
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl
    ld (hl), a
    inc hl

    inc b
    jp nz, .charloop
    ret

; -------------------------------------------------------------------------

openDataFile:
    ld hl, dataFileName
    ld (inboxData), hl
    ExecuteCommand cmdFileOpen
    ret

; -------------------------------------------------------------------------

initInboxData:
    ld hl, loadAddress
    ld (inboxData), hl
    ret

; -------------------------------------------------------------------------

loadBigFrames:
    ld hl, bigFrames
    ld (loadAddress), hl

    ; Get the size of the big frame data
    ld hl, 2
    ld (loadByteCount), hl
    ExecuteCommand cmdFileRead

    ; Load that many bytes
    ld hl, (bigFrames)
    ld (loadByteCount), hl
    ExecuteCommand cmdFileRead

    ret

; -------------------------------------------------------------------------

initVariables:
    ld hl, dataBuffer
    ld (loadAddress), hl
    ret

; -------------------------------------------------------------------------

interrupt:
    push af
    push hl
    ld hl, (time)
    inc hl
    ld (time), hl
    pop hl
    pop af
    reti

; -------------------------------------------------------------------------

endOfCode:

dataBuffer = endOfCode
bigFrames = dataBuffer + 40*30
